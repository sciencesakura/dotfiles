set autoindent
set belloff=all
set encoding=utf-8
set expandtab
set ignorecase
set laststatus=2
set number
set shiftwidth=2
set smartcase
set splitbelow
set tabstop=2
set termwinsize=16x0
if has('clipboard')
  set clipboard=unnamed
endif
if has('cmdline_info')
  set ruler
endif
if has('extra_search')
  set hlsearch
  set incsearch
endif
if has('mouse')
  set mouse=a
endif
if has('smartindent')
  set smartindent
endif
if has('syntax')
  set cursorline
  set spell
  set spelllang=en,cjk
  set spelloptions=camel
endif
if has('termguicolors') && $COLORTERM == 'truecolor'
  set termguicolors
endif

if $TERM !~ '^xterm'
  let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
  let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
endif

filetype plugin indent on

if &t_Co > 1
  syntax enable
  colorscheme iceberg
endif

" asyncomplete.vim
autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
      \ 'name': 'file',
      \ 'allowlist': ['*'],
      \ 'priority': 10,
      \ 'completor': function('asyncomplete#sources#file#completor')
      \ }))
autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
      \ 'name': 'buffer',
      \ 'allowlist': ['*'],
      \ 'priority': 90,
      \ 'completor': function('asyncomplete#sources#buffer#completor')
      \ }))

" caw.vim
let g:caw_no_default_keymappings = 1

" emmet-vim
let g:user_emmet_install_global = 0
autocmd FileType html,xml EmmetInstall

" NERDTree
let g:NERDTreeIgnore = ['^\.DS_Store$', '^\.git', '^Thumbs.db$', '\.swp$']
let g:NERDTreeWinSize = 42
let g:NERDTreeGitStatusUseNerdFonts = 1

" previm
function! s:install_previm()
  let g:previm_enable_realtime = 1
  let g:previm_show_header = 0
  packadd previm
endfunction

" vim-airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" vim-lsp
if has('popupwin')
  let g:lsp_diagnostics_float_cursor = 1
else
  let g:lsp_diagnostics_echo_cursor = 1
endif
let g:lsp_diagnostics_signs_error = {'text': ''}
let g:lsp_diagnostics_signs_hint = {'text': 'ﯦ'}
let g:lsp_diagnostics_signs_information = {'text': ''}
let g:lsp_diagnostics_signs_warning = {'text': ''}
let g:lsp_document_code_action_signs_hint = {'text': ''}
function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  if exists('+tagfunc')
    setlocal tagfunc=lsp#tagfunc
  endif
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> [g <plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <plug>(lsp-next-diagnostic)
  nmap <buffer> K <plug>(lsp-hover)
endfunction

nnoremap <silent> <Esc><Esc> :nohlsearch<CR>
nnoremap <silent> tt :tabnew<CR>
nnoremap <silent> th :tabprevious<CR>
nnoremap <silent> tl :tabnext<CR>
nnoremap <silent> tm :terminal<CR>
" caw.vim
nmap <silent> gcc <Plug>(caw:hatpos:toggle)
xmap <silent> gcc <Plug>(caw:hatpos:toggle)
nmap <silent> gcw <Plug>(caw:wrap:toggle)
xmap <silent> gcw <Plug>(caw:wrap:toggle)
" NERDTree
nnoremap <silent> <C-n> :NERDTreeToggle<CR>

augroup lazy_packadd
  autocmd!
  autocmd FileType markdown call s:install_previm()
augroup END

augroup lsp_install
  autocmd!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
